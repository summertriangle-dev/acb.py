name: CI

on: [push, pull_request]

jobs:
  deploy:
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macOS-latest', 'windows-latest']
        python-version: ['3.9', '3.8', '3.7', '3.6']
        compiler: ['gcc']
        architecture: ['x86', 'x64']

    timeout-minutes: 30

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} ${{ matrix.architecture }} - ${{ matrix.python-version }}

    steps:
      - uses: actions/checkout@v2

      # Setup for Windows - installs the correct python architecture, x86 / x64
      - name: Set up Python (Win) ${{ matrix.python-version }} ${{ matrix.architecture }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}
        if: runner.os == 'Windows'

      # Setup for Mac & Linux, both don't support architecture selection without using specific versions
      - name: Set up Python (Non-Win) ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
        if: runner.os != 'Windows'

      # Display the versions
      - name: Show runner information
        run: |
          python --version
          pip --version

      # Installs the dependencies, add yours here
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade setuptools wheel pytest twine

      # Syntax check
      - name: Lint with flake8
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # Build
      - name: Build package
        run: python setup.py build

      # Install Local
      - name: Install package
        run: python setup.py install --user

      # Run Tests, have to be in a file with test in name in a folder named tests with functions with test in the name
      - name: Run tests
        run: pytest -v -s

      # Create wheels for deployment
      - name: Build wheels
        run: python setup.py sdist bdist_wheel --skip-build

      # Deploy
      # - name: Publish
      #   if: success() && runner.os != 'Linux' && github.event_name == 'push'
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      #   run: |
      #     twine upload dist/* --skip-existing
